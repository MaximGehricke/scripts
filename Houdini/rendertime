#rendertime
#measure the rendertime. found at: https://github.com/carlo-liparata/arnold-render-timer/blob/main/arnold-render-timer.py
#icon = "opdef:/Driver/arnold?IconSVG"

import hou
import datetime

from PySide2 import QtGui,QtCore,QtWidgets
from PySide2.QtCore import Qt, QSize
from PySide2.QtGui import QPalette
from PySide2.QtWidgets import *
from threading import Timer
from time import sleep
import psutil
      

class RepeatedTimer(object):
    def __init__(self, interval, function, *args, **kwargs):
        self._timer     = None
        self.interval   = interval
        self.function   = function
        self.args       = args
        self.kwargs     = kwargs
        self.is_running = False

    def _run(self):
        self.is_running = False
        self.start()
        self.function(*self.args, **self.kwargs)

    def start(self):
        if not self.is_running:
            self._timer = Timer(self.interval, self._run)
            self._timer.start()
            self.is_running = True

    def stop(self):
        self._timer.cancel()
        self.is_running = False
         
        
class myUi(QtWidgets.QMainWindow):
    
    def __init__(self,*args):     

        super(myUi, self).__init__()
        
        self.setMinimumSize(600, 150)
        self.setWindowTitle("Flat Arnold IPR Controller")
        self.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        self.active_IPR = self.findIPRWindow()        
        
        self.timer = RepeatedTimer(1, self.checkIsRendering)       
        
        self.startTime = None
        self.endTime = None
        self.elapsedTime = None
        self.renderCheck = False
        
        self.elapsedHMS = None
        self.renderableRopsDict = None
        
        self.startButton = QPushButton("Start Render", self)
        self.startButton.clicked.connect(self.myStartRender)
        
        self.resumeButton = QPushButton("Resume Render", self)
        self.resumeButton.clicked.connect(self.myResumeRender)
               
        self.pauseButton = QPushB
    [pasted text truncated for security]
